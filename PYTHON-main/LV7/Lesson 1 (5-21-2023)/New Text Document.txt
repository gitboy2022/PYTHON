from typing import List
from datetime import datetime


class Book:
    def __init__(self, title, author, genre, year, isbn, description, borrowed=False, currentBorrower=""):
        self.title: str = title
        self.author: str = author
        self.genre: str = genre
        self.year: int = year
        self.isbn: str = isbn
        self.description: str = description
        self.borrowed: bool = borrowed
        self.currentBorrower: str = currentBorrower


class BorrowingHistory:
    def __init__(self, book, borrower, dateBorrowed, dateReturned=None):
        self.book: Book = book
        self.borrower: str = borrower
        self.dateBorrowed: datetime = dateBorrowed
        self.dateReturned: datetime = dateReturned


class Library:
    books: List[Book]
    borrowingHistory: List[BorrowingHistory]

    def __init__(self):
        self.books = []
        self.borrowingHistory = []

    def addBook(self, book: Book) -> bool:
        if list(filter(lambda x: x.title == book.title, self.books)):
            print(f'{book.title} is already in the library!')
            return False

        self.books.append(book)
        return True

    def removeBook(self, book: Book) -> bool:
        if list(filter(lambda x: x.title == book.title, self.books)) is not []:
            print(f'{book.title} is not in the library!')
            return False

        self.books.remove(book)
        return True

    def borrowBook(self, book: Book, borrower: str) -> bool:
        if not list(filter(lambda x: x.title == book.title, self.books)):
            print(f'{book.title} is not in the library!')
            return False

        bookIndex: int = self.books.index(book)

        if self.books[bookIndex].borrowed is True:
            print(f'{book.title} is already borrowed')
            return False

        self.books[bookIndex].borrowed = True
        self.books[bookIndex].currentBorrower = borrower
        self.borrowingHistory.append(BorrowingHistory(
            self.books[bookIndex],
            borrower,
            datetime.now(),
            None
        ))
        return True

    def returnBook(self, book: Book) -> bool:
        if not list(filter(lambda x: x.title == book.title, self.books)):
            print(f'{book.title} is not in the library!')
            return False

        bookIndex: int = [i for i, v in enumerate(self.borrowingHistory) if v.book.title == book.title][0]

        self.books[bookIndex].borrowed = False
        self.books[bookIndex].currentBorrower = ''
        self.borrowingHistory[bookIndex].dateReturned = datetime.now()
        return True

    def getBorrowingHistory(self) -> str:
        history = ''

        for h in self.borrowingHistory:
            history += f'''
Title: {h.book.title} 
Borrower: {h.borrower} 
Date Borrowed: {h.dateBorrowed.strftime('%c')} 
Date Returned: {h.dateReturned.strftime('%c') if h.dateReturned is not None else "Not Returned"}\n'''

        return history

    def getBooksByAuthor(self, author: str) -> List[Book]:
        return [b for b in self.books if b.author.lower() == author.lower()]

    def getBookByTitle(self, title: str) -> Book:
        return [b for b in self.books if b.title == title][0]

    def getBooksByYear(self, year: int) -> List[Book]:
        return [b for b in self.books if b.year == year]

    def getBooksByBorrower(self, borrowerName: str) -> List[Book]:
        return [b.book for b in self.borrowingHistory if b.borrower == borrowerName]

    def getBorrowedBooks(self) -> List[BorrowingHistory]:
        return [b.book for b in self.borrowingHistory]

    def getAvailableBooks(self) -> List[Book]:
        return [b for b in self.books if not b.borrowed]

    def getBooksByGenre(self, genre: str) -> List[Book]:
        return [b for b in self.books if b.genre.lower() == genre.lower()]
