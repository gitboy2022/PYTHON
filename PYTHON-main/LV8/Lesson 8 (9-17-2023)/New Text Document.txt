class Node:
    def __init__(self, data):
        # Initialize a node with data and next pointer
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        # Initialize a singly linked list with a head pointer
        self.head = None

    def append(self, data):
        # Append a new element to the end of the linked list
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def prepend(self, data):
        # Insert a new element at the beginning of the linked list
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_after_node(self, prev_node, data):
        # Insert a new element after a specified node
        if not prev_node:
            print("Previous node not in the list")
            return
        new_node = Node(data)
        new_node.next = prev_node.next
        prev_node.next = new_node

    def delete_node_by_value(self, value):
        # Remove a node with a specific value from the linked list
        current = self.head
        if current and current.data == value:
            self.head = current.next
            current = None
            return
        prev = None
        while current and current.data != value:
            prev = current
            current = current.next
        if not current:
            return
        prev.next = current.next
        current = None

    def delete_node_by_position(self, position):
        # Remove a node at a specific position in the linked list
        if self.head:
            current = self.head
            if position == 0:
                self.head = current.next
                current = None
                return
            for _ in range(position - 1):
                current = current.next
                if not current:
                    break
            if not current or not current.next:
                return
            temp = current.next
            current.next = temp.next
            temp = None

    def node_swap(self, key_1, key_2):
        # Swap two nodes in the linked list without modifying data
        if key_1 == key_2:
            return

        prev_1 = prev_2 = None
        current_1 = current_2 = self.head

        while current_1 and current_1.data != key_1:
            prev_1 = current_1
            current_1 = current_1.next

        while current_2 and current_2.data != key_2:
            prev_2 = current_2
            current_2 = current_2.next

        if not current_1 or not current_2:
            return

        if prev_1:
            prev_1.next = current_2
        else:
            self.head = current_2

        if prev_2:
            prev_2.next = current_1
        else:
            self.head = current_1

        current_1.next, current_2.next = current_2.next, current_1.next
